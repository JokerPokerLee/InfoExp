/* ----------------------------------------------------------------------- *
 * This file is responsible for history panel's manipulation.
 *
 * This file containing functions related to history panel's html
 * manipulation:
 *  --- update_history_panel
 *      +-- get_history_item_html
 *      +-- get_history_block_html
 *      +-- delete_history_item
 *
 * These functions do not use global variable, only update_history_panel
 * takes history_blocks as a parameter and will further call the rest
 * two functions.
 *
 * These functions will be used in history page and search page.
 * 
 * ----------------------------------------------------------------------- */

/**
 * Get the history item object, and then return the HTML text.
 * Used to update the history panel.
 * 
 * @param {history item} history
 * A history item is a javascript object. For more details,
 * pls reference to chrome API.
 */
function  get_history_item_html(history, history_id) {
    var res = '<li> <div class = "record" id="' + history_id +　'">';
/*
    <div class = "history_item_title">
      Google Page 
    </div>
    <div class = "history_item_url">
      <a href = "http://www.google.com">http://www.google.com </a>
    </div>
*/

    // Show time
    var show_time = "";
    if(history.visitTime)
    {
        var history_date = new Date(history.visitTime);
        var hour = history_date.getHours();
        var minute = history_date.getMinutes();
        var second = history_date.getSeconds();
        if(hour<10)
        {
            show_time = "0" + hour + " : ";
        }
        else
        {
            show_time = hour + " : ";
        }
        if(minute<10)
        {
            show_time = show_time + "0" + minute + " : ";
        }
        else
        {
            show_time = show_time + minute + " : ";
        }
        if(second<10)
        {
            show_time = show_time + "0" + second;
        }
        else
        {
            show_time = show_time + second;
        }
    }
    res = res + '<span><img class = "history_delete" id = "a' + history_id + '" src="../imgs/delete_16px.png" title="Delete" height=16em></img></span>';
    res = res + "<span class = 'history_time'>" + show_time + "</span>"

    
    var show_url = history.isGroup ? (parseURL(history.url).protocol + "://" + history.groupHost) : history.url;
    
    for(var index=0; index<forbid_list.length; index++)
    {
        var shortstring = forbid_list[index];
        if(show_url.indexOf(shortstring) != -1)
            return "hulahula";
    }
   
    var show_title = history.isGroup ? history.groupHost : history.title;
    title_length=show_title.length;
    if(title_length > 24){
        show_title = show_title.substring(0,24) + "..." ;
    }
    if(!show_title)
    {
        show_title = "No title";
    }
	
    url_length = show_url.length;
    if(url_length > 35+3+4){
        show_url = show_url.substring(0,35) + "..." + show_url.substring(url_length - 4,url_length)
    }
    var imageURL = history.isGroup ? ("../imgs/plus.png") : ('chrome://favicon/' + history.url);
    res = res + '<span class="title" id="icon' + history_id + '" style="background-image: url(' + imageURL + ');"><a title = "' + history.title + '" href = "' + history.url + '"> '+show_title+' ' + ' </a><text title = " '+history.url+' " class="url">'+ show_url +'</text></span>';
	res = res + '</div></li>';
	
    return res;
}

/**
 * Get the history block object, and then return the HTML text.
 * Used to update the history panel.
 * 
 * @param {history block} history_block
 * A history block is a javascript object which contains:
 * {
 *  title: // the block's name
 *  historys: // the array of history items(return from chrome API)
 * }
 * @param {int} block_id 
 */
function get_history_block_html(history_block, block_id) {

    var res = '';
    var flag = false;

    for(var i = 0; i < history_block.historys.length; ++i){
        var history_id = "b" + block_id.toString() + "h" + i.toString();
        var get_h = get_history_item_html(history_block.historys[i], history_id);
        if (get_h != "hulahula"){
            flag = true;
            break;
        }
    }

    if(flag){
        res = '<div class = "history_block">';
        res = res + "<h4>" + history_block.title + "</h4>";
        res = res + "<dic class = 'history_list'>";
        for(var i = 0; i < history_block.historys.length; ++i){
            var history_id = "b" + block_id.toString() + "h" + i.toString();
            var get_h = get_history_item_html(history_block.historys[i], history_id);
            if (get_h != "hulahula")
                res = res + get_h;
        }
        res = res + '</div></div>';
    }
    return res;
}

/**
 * This function is triggered when some record delete button is clicked. 
 * It take the id of the corresponding record and use jquery to remove
 * it from history panel and also remove the url from chrome history.
 *
 * @param {A history id string} history_id - the string indicating the records id
 */
function delete_history_item(history_id)
{
    var record = document.getElementById(history_id.substring(1));
    if (!record) {
        return;
    }

    var split_history = history_id.split(/b|h|g/);
    var block_int = parseInt(split_history[1]);
    var history_int = parseInt(split_history[2]);
    var group_int = split_history[3] ? parseInt(split_history[3]) : null;
    var record = history_blocks[block_int].historys[history_int];

    var li = document.getElementById(history_id.substring(1)).parentElement;
    var parent = li.parentElement;
    var hide = (document.getElementById("icon" + history_id.substring(1)).style.backgroundImage == 'url("../imgs/plus.png")');
    
    var deleteTransitionTime = 3;//Set the whole delete action need (deleteTransitionTime)*0.1 seconds.
    var $deleteRecord=$("#"+history_id.substring(1));
    $deleteRecord.addClass("deleting");

    // Use jQuery to remove some elements
    var handle = setInterval(function() {
        $("#"+history_id.substring(1)).remove();
        parent.removeChild(li);
        if (parent.childElementCount === 0) {
            var blockEmpty = (parent.nodeName == "DIC" && parent.parentElement.childElementCount == 2);
            if (blockEmpty) {
                parent.parentElement.parentElement.removeChild(parent.parentElement);
            } else {
                parent.parentElement.removeChild(parent);
                delete_history_item("ab" + block_int + "h" + history_int);
            }
        }
        // otherwise it will keep repeating
        clearInterval(handle);
    },deleteTransitionTime*100);

    if (group_int == null && record.isGroup != undefined && record.isGroup == true) {
        for (var i = 0; i < record.group.length; i++) {
            if (record.group[i].deleted == false) {
                if (hide) {
                    chrome.history.deleteUrl({'url': record.group[i].url});
                    record.group[i].deleted = true;
                } else {
                    delete_history_item(history_id + "g" + i);
                }
            }
        }
    } else {
        // Then we should call the API function
        if (history_id.indexOf("g") != -1) {
            url_obj = {url: record.group[split_history[3]].url};
            record.group[group_int].deleted = true;
        } else {
            url_obj = {url: record.url};
        }
        chrome.history.deleteUrl(url_obj);
    }

}

/**
 * The main function used to update the history panel div.
 * It takes an array of history blocks as input, and show 
 * them in the history panel region.
 * 
 * @param {Array of history blocks} history_blocks - the array of history blocks
 * A history block is a javascript object which contains:
 * {
 *  title: // the block's name
 *  historys: // the array of history items(return from chrome API)
 * }
 */
function update_history_panel(history_blocks) {
    var panel = document.getElementById("history_panel");
    
    // history_blocks is expected to be an array of history blocks.
    // this object includes:
    // Title
    // history_list
    var panel_inner_html = "";
    for(var i = 0;i<history_blocks.length; ++ i){
        var block_id = i;
        panel_inner_html = panel_inner_html + get_history_block_html(history_blocks[i], block_id);
    }


    panel.innerHTML = panel_inner_html;


    // Add some listener
    
    for(var i = 0; i < history_blocks.length; ++ i)
    {
        for(var j = 0;j<history_blocks[i].historys.length; ++ j)
        {
            var history_id = "b" + i.toString() + "h" + j.toString();
            var record = document.getElementById(history_id);
            var del = document.getElementById("a" + history_id);
                                
            if(del)
            {
                del.addEventListener("click", function(el){
                    delete_history_item(el.target.id);
                });
            }

            if (record && history_blocks[i].historys[j].isGroup) {
                var icon = document.getElementById("icon" + history_id);
                icon.addEventListener("click", function(element) {
                    var imageURL = element.target.style.backgroundImage;
                    var id = element.target.id;
                    var li = element.target.parentElement.parentElement;
                    if (imageURL == "url(\"../imgs/plus.png\")") {
                        element.target.style.backgroundImage = "url(\"../imgs/minus.png\")";
                        var num = id.split(/b|h/);
                        var subList = document.createElement('ul');
                        for (var i = 0; i < history_blocks[num[1]].historys[num[2]].group.length; i++) {
                            if (history_blocks[num[1]].historys[num[2]].group[i].deleted) {
                                continue;
                            }
                            subList.innerHTML += get_history_item_html(history_blocks[num[1]].historys[num[2]].group[i], id.substring(4) + "g" + i);
                        }
                        if (subList.innerHTML.length > 0) {
                            li.appendChild(subList);
                            for (var i = 0; i < history_blocks[num[1]].historys[num[2]].group.length; i++) {
                                if (history_blocks[num[1]].historys[num[2]].group[i].deleted) {
                                    continue;
                                }
                                document.getElementById("a" + id.substring(4) + "g" + i).addEventListener("click", function(element) {
                                        var li = element.target.parentElement.parentElement;
                                        var parent = li.parentElement.parentElement;
                                        delete_history_item(element.target.id);
                                });
                            }
                        }
                    } else {
                        element.target.style.backgroundImage = "url(\"../imgs/plus.png\")";
                        li.removeChild(li.childNodes[2]);
                    }
                });
            }
        }
    }
    
}

/* ------------------------------------------------------
 * This is the main javascript file for the history page
 * It can search the history in past 3 days. Then show them
 * in the history panel.
 * ------------------------------------------------------*/

const DEFAULT_MAX_NUMBER_HISTORY    = 300;

var history_time = 3600 * 24 * 5 * 1000; // 5 days
var start_time = (new Date).getTime() - history_time;
var search_condition = {
    'text': '',
    'startTime': start_time,
    'maxResults': 1000
};

var top_click = new Array();
//alert("top_click1?");
chrome.history.search(search_condition, 
    function (history_items) {
        
        generate_bookmarks(find_top_click(history_items));
    });

    
function find_top_click(list){

    if(list.length==0)
        return false;
    var top_items=new Array();
    if(list.length<10){
        //alert("in second if");
        for(var i=0;i<list.length;i++){
            top_items[i]= {};
            top_items[i].title=list[i].title;
            top_items[i].url=list[i].url;
    }}
    else{
        //alert("in second else");
        list.sort(function compare(obj1,obj2){
            return obj2.visitCount-obj1.visitCount;
        });
        //alert(list.length)
        //alert(list[0].domain)
        for(var i=0;i<3;i++){
            top_items[i]= {};
            top_items[i].title=list[i].title;
            top_items[i].url=list[i].url;
        }
    }
    return top_items;
}
    
function generate_bookmarks(top_click){
chrome.bookmarks.search('Extension bookmarks',function(bookmarkArray){
    var length = bookmarkArray.length;
    var temp = 0;
    //alert("length");
    //alert(length);
    for(var i = 0; i < length;i++)
    {
        //alert(i);
        //alert(bookmarkArray[i].id);
        if(bookmarkArray[i].title == 'Extension bookmarks')
        {
                //alert("find it?");
                temp =1;
                for(var k = 0;k <top_click.length;k++){
                    //alert("the top length is");
                    //alert(top_click.length);
                    
                chrome.bookmarks.getChildren(bookmarkArray[i].id, function(bookmarkArray_child){
                var j = 0;
                for (j =0;j<bookmarkArray_child.length;j++)
                {
                if (top_click[k].url == bookmarkArray_child.url)
                {
                    continue;
                }
   
                }
                
                if (j == bookmarkArray_child.length)
                {
                chrome.bookmarks.create({'parentId': bookmarkArray[i].id,
                               // 'title': 'zhe...haoba',
                               // 'url': 'http://ethereon.github.io/netscope/#/editor'
                               'title': top_click[k].title,
                               'url': top_click[k].url
                               });
                    
                }
                
                });
   
                }
        }
        
    }
    if(i==length&&temp ==0)
    {
        //alert("wokao");
            chrome.bookmarks.create({'parentId': "1",
                               'title': 'Extension bookmarks'},
                              function(newFolder) {
            
            
            //for(var i = 0; i < length;i++)
            //{
            for(var k = 0;k <top_click.length;k++){
                    //alert("the top length is");
                    //alert(top_click.length);
                chrome.bookmarks.create({'parentId': newFolder.id,
                               // 'title': 'zhe...haoba',
                               // 'url': 'http://ethereon.github.io/netscope/#/editor'
                               'title': top_click[k].title,
                               'url': top_click[k].url
                               });
                }
            //}
            });
    }
    
});
}
/**
 * Parse a array of history items into several blocks.
 * This function can be used as a call back funtion in 
 * chrome.histroy.search()
 * 
 * 
 * @param {history item} history_items - a array of history item.
 * A history item is a javascript object. For more details,
 * pls reference to chrome API.
 */
var history_blocks = new Array();
function parse_history_into_blocks(history_items) {
    for(var i = 0; i < history_items.length; i++) {
        if(history_items[i].visitTime) {
            var history_date = new Date(history_items[i].visitTime);
            if(history_blocks.length > 0
                && history_blocks[history_blocks.length - 1].title
                     === history_date.toDateString()) {
                history_blocks[history_blocks.length - 1].historys.push(history_items[i]);
            } else {
                // it's a new day
                var newBlock = {
                    title: history_date.toDateString(),
                    historys: new Array(history_items[i])
                };
                history_blocks.push(newBlock);
            }
        }
    }
    return history_blocks;
}

function search_history(search_condition) {
    history_blocks = [];
    search(search_condition, 
        function (history_items) {
            history_items = parseToDomainGroup(history_items);
            history_blocks = parse_history_into_blocks(history_items);
            update_history_panel(history_blocks);
        }
    );
}

function time_norm(target_date){
    return new Date(target_date).getTime();
}


function search_onclick()
{
    var search_text_element = document.getElementById("search_text");
    var calender = document.getElementById("calendar_div");
    var date_0 = document.getElementById("calendar-0").value;
    var date_1 = document.getElementById("calendar-1").value;
    var flag = false;
    var search_condition = {
        'text':'',
        'startTime': (new Date).getTime() - ONE_WEEK,
        'endTime': (new Date).getTime(),
        'maxResults': DEFAULT_MAX_NUMBER_HISTORY
    }
    if(calender.style.display == "inline" && date_0){
        search_condition.startTime = time_norm(date_0);
        flag = true;
    }
    if(calender.style.display == "inline" && date_1){
        search_condition.endTime = time_norm(date_1) + ONE_DAY;
        flag = true;
    }
    if(search_text_element.value){
        search_condition.text = search_text_element.value;
        flag = true;
    }
    if(flag){
        search_history(search_condition);
    }

}

document.getElementById("search_button").addEventListener("click", search_onclick);
// document.getElementById("search_text").addEventListener('input', search_onclick);


function EnterPress(e){
    var e = e || window.event; 
    if(e.keyCode == 13){ 
        search_onclick();
    }
}
document.getElementById("search_text").addEventListener("keydown", EnterPress);


document.getElementById("calendar_icon").addEventListener("click", 
    function() {
        var calender = document.getElementById("calendar_div");
        var calender_0 = document.getElementById("calender-0");
        var calender_1 = document.getElementById("calender-1");
        if(calender.style.display=="none"){
            calender.style.display="inline";
        }
        else{
            calender.style.display="none";
        }

    }
);

document.addEventListener('DOMContentLoaded',
    function() {
        date0.on('select', function(data) {
            search_onclick();
        });
        date1.on('select', function(data) {
            search_onclick();
        });
    }
);

var forbid_list = new Array();

// Add filter
load_invisible_item(
    function() {
        forbid_list = invisible_item;
        // init history panel
        search_history({
            'text': "",
            'maxResults': DEFAULT_MAX_NUMBER_HISTORY
        });
    }
);
